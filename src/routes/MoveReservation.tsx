import { useParams } from 'react-router';
import RouteContainer from '../components/RouteContainer';
import createClient from 'openapi-fetch';
import type { paths, components } from '../api/schema'; // generated by openapi-typescript
import { useEffect, useState } from 'react';
import { useAuth } from '../context/AppContext';

const client = createClient<paths>({ baseUrl: import.meta.env.VITE_API_URL });

type EquipmentUnion = string | number | string[] | boolean;
type Reservation = components['schemas']['Reservation'];

function MoveReservation() {
  const { state } = useAuth();

  const { reservationId } = useParams();
  const [schedule, setSchedule] = useState<Reservation[]>();
  const [selectedSlot, setSelectedSlot] = useState();

  useEffect(() => {
    async function fetchSchedule() {
      const { data, error } = await client.GET('/api/reservation/', {
        headers: {
          Authorization: 'Token ' + state?.user?.token,
        },
      });
      if (!error) setSchedule(data);
    }
    fetchSchedule();
  }, [reservationId]);

  useEffect(() => {
    async function fetchRoom() {
      const reservation = await client.GET('/api/reservation/{id}/', {
        credentials: 'include',
        params: { path: { id: parseInt(reservationId ?? '') } },
      });
      const details = (reservation.data?.room.equipment.details ?? {}) as {
        [key: string]: EquipmentUnion;
      };
      const start = reservation.data?.date_time;
      const end = start;
      if (start === undefined || end === undefined) {
        throw Error('no start or end time');
      }
      console.log(details);
      const details_query: { [key: string]: EquipmentUnion } = {};
      for (const [key, value] of Object.entries(details)) {
        if (Array.isArray(value)) {
          details_query[key + '__contains'] = value;
        } else {
          switch (typeof value) {
            case 'string':
              details_query[key + '__ilike'] = value;
              break;
            case 'number':
              details_query[key + '__gte'] = value;
              break;
            case 'boolean':
              details_query[key + '__exact'] = value;
              break;
          }
        }
      }
      const rooms = await client.GET('/api/rooms/available/', {
        credentials: 'include',
        params: { query: { start, end, ...details_query } },
      });
    }
    fetchRoom();
  }, [reservationId]);

  return <RouteContainer></RouteContainer>;
}

export default MoveReservation;
