import { useCallback, useEffect, useState } from 'react';
import { usePersistent } from '../util/local';
import { useDebounce } from 'use-debounce';
import ArrowRightIcon from '@mui/icons-material/ArrowRight';
import FilterList from '@mui/icons-material/FilterList';
import SearchIcon from '@mui/icons-material/Search';
import RouteContainer from '../components/RouteContainer';
// import SearchBar from '../components/search/SearchBar';
import ItemList from '../components/ItemList';
import createClient from 'openapi-fetch';
import type { paths, components } from '../api/schema'; // generated by openapi-typescript

const client = createClient<paths>({ baseUrl: import.meta.env.VITE_API_URL });

type Building = components['schemas']['Building'];
type Room = components['schemas']['Room'];

function BuildingCard({ building }: { building: Building }) {
  return (
    <>
      <div className='list-col-grow'>
        <div>{building.name}</div>
        <div className='text-xs uppercase font-semibold opacity-60'>
          {building.address}
        </div>
      </div>
      {/* <p className='list-col-grow text-xs'>{building.description}</p> */}
      <button className='btn btn-square btn-ghost'>
        {/* <p className='not-hover:invisible'>filtruj</p> */}
        <FilterList />
      </button>
    </>
  );
}

function RoomCard({ room }: { room: Room }) {
  const building = room.building;
  return (
    <>
      <div className='list-col-grow'>
        <div>
          {building.name} - {room.room_number}
        </div>
        <div className='text-xs uppercase font-semibold opacity-60'>
          {room.capacity} siedze≈Ñ
        </div>
      </div>
      {/* <p className='list-col-grow text-xs'>{building.description}</p> */}
      <button className='btn btn-square btn-ghost'>
        {/* <p>zobacz</p> */}
        <ArrowRightIcon />
      </button>
    </>
  );
}

function SearchRooms() {
  const [rooms, setRooms] = useState<Room[]>([]);
  const [buildings, setBuildings] = useState<Building[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [searchQuery, setSearchQuery] = usePersistent('search_query', '');
  const [searchQueryValue] = useDebounce(searchQuery, 400);

  const searchBuildings = async (searchQuery: string) => {
    const params = { query: { search: searchQuery } };
    const { data, response } = await client.GET('/api/buildings/', {
      credentials: 'include',
      params,
    });

    if (!response.ok) throw new Error('search failed');

    setBuildings(data ?? []);
  };

  const searchRooms = async (searchQuery: string) => {
    const params = { query: { search: searchQuery } };
    const { data, response } = await client.GET('/api/rooms/', {
      credentials: 'include',
      params,
    });

    if (!response.ok) throw new Error('search failed');

    setRooms(data ?? []);
  };

  const handleSearch = useCallback(async (searchQuery: string) => {
    setIsLoading(true);
    try {
      searchBuildings(searchQuery);
      searchRooms(searchQuery);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    handleSearch(searchQueryValue);
  }, [searchQueryValue, handleSearch]);

  return (
    <RouteContainer>
      <div className='grid grid-cols-[1fr_4fr_1fr]'>
        <div></div>
        <div className='min-h-80'>
          {/* <SearchBar onUpdate={setSearchQuery} /> */}
          <label className='input text-xl w-full'>
            <SearchIcon className='text-gray-400' />
            <input
              type='search'
              onInput={event => {
                const target = event.target as HTMLInputElement;
                setSearchQuery(target.value);
              }}
              required
              value={searchQuery}
              placeholder='...'
            />
          </label>
          <div className='flex flex-col items-center'>
            {searchQuery === '' ? (
              <div>Type building name to search...</div>
            ) : isLoading ? (
              <span className='loading loading-ring loading-md'></span>
            ) : (
              <div className='w-5/6'>
                <ItemList
                  header='Budynki'
                  rows={buildings}
                  mapper={row => <BuildingCard building={row} />}
                />
                <ItemList
                  header='Sale'
                  rows={rooms}
                  mapper={row => <RoomCard room={row} />}
                />
              </div>
            )}
          </div>
        </div>
        <div></div>
      </div>
    </RouteContainer>
  );
}

export default SearchRooms;
