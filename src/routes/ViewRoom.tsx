import { DayBin } from '../model/slots';
import WeekSchedule from '../components/room/WeekSchedule';
import RouteContainer from '../components/RouteContainer';
import { NavLink, useParams } from 'react-router';
import createClient from 'openapi-fetch';
import type { paths, components } from '../api/schema'; // generated by openapi-typescript
import { useEffect, useState } from 'react';

const client = createClient<paths>({ baseUrl: import.meta.env.VITE_API_URL });

type Room = components['schemas']['Room'];

const slots: DayBin[] = [
  {
    day: 'Pon',
    rows: [
      { type: 'taken', time: '8:00', spans: 1, subject: 'TC' },
      { type: 'taken', time: '9:45', spans: 1, subject: 'TC' },
      { type: 'empty', time: '11:30', spans: 1, claimID: '1' },
      { type: 'taken', time: '13:15', spans: 1, subject: 'PF' },
      { type: 'taken', time: '15:00', spans: 1, subject: 'PF' },
      { type: 'empty', time: '16:45', spans: 1, claimID: '2' },
      { type: 'empty', time: '18:30', spans: 1, claimID: '3' },
    ],
  },
  {
    day: 'Wt',
    rows: [
      { type: 'taken', time: '8:00', spans: 1, subject: 'AM1' },
      { type: 'taken', time: '9:45', spans: 1, subject: 'AM1' },
      { type: 'empty', time: '11:30', spans: 1, claimID: '1' },
      { type: 'taken', time: '13:15', spans: 1, subject: 'PF' },
      { type: 'taken', time: '15:00', spans: 1, subject: 'PF' },
      { type: 'empty', time: '16:45', spans: 1, claimID: '2' },
      { type: 'empty', time: '18:30', spans: 1, claimID: '3' },
    ],
  },
  {
    day: 'Śr',
    rows: [
      { type: 'taken', time: '8:00', spans: 1, subject: 'TC' },
      { type: 'taken', time: '9:45', spans: 1, subject: 'TC' },
      { type: 'empty', time: '11:30', spans: 1, claimID: '1' },
      { type: 'taken', time: '13:15', spans: 1, subject: 'PF' },
      { type: 'taken', time: '15:00', spans: 1, subject: 'PF' },
      { type: 'empty', time: '16:45', spans: 1, claimID: '2' },
      { type: 'empty', time: '18:30', spans: 1, claimID: '3' },
    ],
  },
  {
    day: 'Czw',
    rows: [
      { type: 'taken', time: '8:00', spans: 1, subject: 'PC' },
      { type: 'taken', time: '9:45', spans: 1, subject: 'PC' },
      { type: 'taken', time: '11:30', spans: 1, subject: 'DF' },
      { type: 'taken', time: '13:15', spans: 1, subject: 'PF' },
      { type: 'taken', time: '15:00', spans: 1, subject: 'PF' },
      { type: 'empty', time: '16:45', spans: 1, claimID: '2' },
      { type: 'empty', time: '18:30', spans: 1, claimID: '3' },
    ],
  },
  {
    day: 'Pt',
    rows: [
      { type: 'taken', time: '8:00', spans: 1, subject: 'TC' },
      { type: 'taken', time: '9:45', spans: 1, subject: 'TC' },
      { type: 'empty', time: '11:30', spans: 1, claimID: '1' },
      { type: 'taken', time: '13:15', spans: 1, subject: 'PF' },
      { type: 'taken', time: '15:00', spans: 1, subject: 'PF' },
      { type: 'empty', time: '16:45', spans: 1, claimID: '2' },
      { type: 'empty', time: '18:30', spans: 1, claimID: '3' },
    ],
  },
  {
    day: 'Sob',
    rows: [
      { type: 'empty', time: '8:00', spans: 1, claimID: '1' },
      { type: 'empty', time: '9:45', spans: 1, claimID: '1' },
      { type: 'empty', time: '11:30', spans: 1, claimID: '1' },
      { type: 'empty', time: '13:15', spans: 1, claimID: '1' },
      { type: 'empty', time: '15:00', spans: 1, claimID: '1' },
      { type: 'empty', time: '16:45', spans: 1, claimID: '2' },
      { type: 'empty', time: '18:30', spans: 1, claimID: '3' },
    ],
  },
  {
    day: 'Nie',
    rows: [
      { type: 'empty', time: '8:00', spans: 1, claimID: '1' },
      { type: 'empty', time: '9:45', spans: 1, claimID: '1' },
      { type: 'empty', time: '11:30', spans: 1, claimID: '1' },
      { type: 'empty', time: '13:15', spans: 1, claimID: '1' },
      { type: 'empty', time: '15:00', spans: 1, claimID: '1' },
      { type: 'empty', time: '16:45', spans: 1, claimID: '2' },
      { type: 'empty', time: '18:30', spans: 1, claimID: '3' },
    ],
  },
];

function ViewRoom() {
  const { roomId, weekId } = useParams();
  const weekIdInt = parseInt(weekId ?? '20');
  const [room, setRoom] = useState<Room>();
  useEffect(() => {
    const get = async () => {
      const params = { path: { id: parseInt(roomId ?? '') } };
      const { data, response } = await client.GET('/api/rooms/{id}/', {
        credentials: 'include',
        params,
      });

      if (!response.ok) throw new Error('search failed');

      setRoom(data);
    };
    get();
  }, [roomId]);

  function padDate(date: number): string {
    return date.toString().padStart(2, '0');
  }

  function getDateFromWeekId(week: number): string {
    const zeroDate = new Date(2025, 0);
    const weekStartDate = new Date(zeroDate.setDate(week * 7 - 1));
    const weekStartDay = weekStartDate.getDate();
    const weekStartMonth = weekStartDate.getMonth() + 1;
    const weekEndDate = new Date(weekStartDate);
    weekEndDate.setDate(weekEndDate.getDate() + 6);
    const weekEndDay = weekEndDate.getDate();
    const weekEndMonth = weekEndDate.getMonth() + 1;
    return (
      padDate(weekStartDay) +
      '.' +
      padDate(weekStartMonth) +
      '-' +
      padDate(weekEndDay) +
      '.' +
      padDate(weekEndMonth)
    );
  }

  return (
    <RouteContainer>
      {/* dialog modal for reservation */}
      <dialog id='reserve_modal' className='modal'>
        <div className='modal-box'>
          <h3 className='font-bold text-lg'>Rezerwacja sali</h3>
          <p className='py-4'>Rezerwuj</p>
          <div className='modal-action'>
            <form method='dialog'>
              {/* if there is a button in form, it will close the modal */}
              <button className='btn'>OK</button>
            </form>
          </div>
        </div>
      </dialog>
      {/* rest of this page */}
      <div className='grid grid-cols-[1fr_4fr_1fr]'>
        <div></div>
        <div className='flex flex-row justify-center'>
          <div>
            <div className='p-8 space-y-4'>
              <h1 className='text-3xl'>
                {room?.room_number} w {room?.building?.name} (
                {room?.building?.address})
              </h1>
              <div className='space-x-4 flex flex-row flex-wrap'>
                <p>Wyposażenie:</p>
                {Object.entries(room?.equipment?.details ?? {}).map(
                  ([k, v]) => (
                    <div className='badge badge-soft badge-primary'>
                      {k}: {v?.toString()}
                    </div>
                  )
                )}
              </div>
            </div>
            <div className='flex justify-center'>
              <div className='join'>
                <NavLink
                  className='join-item btn'
                  to={'/room/' + roomId + '/' + (weekIdInt - 1)}
                >
                  « Poprzedni
                </NavLink>
                <button className='join-item btn w-25'>
                  {getDateFromWeekId(weekIdInt)}
                </button>
                <NavLink
                  className='join-item btn'
                  to={'/room/' + roomId + '/' + (weekIdInt + 1)}
                >
                  Następny »
                </NavLink>
              </div>
            </div>
            {/* <WeekSchedule daysSlots={slots} /> */}
          </div>
        </div>
        <div></div>
      </div>
    </RouteContainer>
  );
}

export default ViewRoom;
