import { useParams } from 'react-router';
import RouteContainer from '../components/RouteContainer';
import createClient from 'openapi-fetch';
import type { components, paths } from '../api/schema'; // generated by openapi-typescript
import { useCallback, useEffect, useState } from 'react';
import WeekScheduleViewer from '../components/room/WeekScheduleViewer';
import { ScheduleVariant } from '../components/room/WeekSchedule';
import ReserveEmptyModal from '../components/modal/ReserveEmptyModal';
import ViewAcceptedModal from '../components/modal/ViewAcceptedModal';
import ViewProposedModal from '../components/modal/ViewProposedModal';
import { useAppContext } from '../context/AppContext';
import { useTrigger } from '../hooks/trigger';

const client = createClient<paths>({ baseUrl: import.meta.env.VITE_API_URL });

type Reservation = components['schemas']['Reservation'];

function MoveReservation() {
  const { reservationId } = useParams();

  const { state } = useAppContext();
  const [trigger, invalidate] = useTrigger();

  const reservationIdInt = parseInt(reservationId ?? '');
  const [reservation, setReservation] = useState<Reservation>();

  const fetchRoomDetails = useCallback(async () => {
    console.log('fetchRoom');
    const { data, error } = await client.GET('/api/reservation/{id}/', {
      headers: {
        Authorization: 'Token ' + state?.user?.token,
      },
      params: { path: { id: reservationIdInt } },
    });
    if (!error) {
      setReservation(data);
    }
  }, [reservationIdInt, state?.user?.token]);

  useEffect(() => {
    fetchRoomDetails();
  }, [fetchRoomDetails, trigger]);

  return (
    <RouteContainer>
      {/* <EditAcceptedModal /> */}
      <ReserveEmptyModal reservation={reservation!} notifyChange={invalidate} />
      <ViewAcceptedModal />
      <ViewProposedModal />
      <div className='hero bg-base-200 min-h-screen'>
        <div className='hero-content'>
          <WeekScheduleViewer
            variant={ScheduleVariant.MOVE}
            trigger={trigger}
          />
        </div>
      </div>
    </RouteContainer>
  );
}

export default MoveReservation;
